version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-2 && \
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --region us-east-2
            # TODO delete stack does not work yet

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            echo Response=$(curl -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            SUCCESS=$(curl -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
            then
            echo "Revert previous migration"
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi 
            
jobs:
  echo-workflowId:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run: 
          name: write out Pipeline ID
          command: |
            echo "Pipeline ID: ${CIRCLE_WORKFLOW_ID:0:7}"

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend && npm install && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend && npm install && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: 
            - frontend-build
      - run:
          name: Run Unit tests
          command: |
            cd frontend && npm run test  
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: 
            - backend-build
      - run:
          name: Run Unit tests
          command: |
            cd backend && npm run test
            
  scan-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: 
            - frontend-build
      - run: 
          name: Scan dependencies for vulnerabilities
          command: | 
            cd frontend && npm install && npm audit fix --audit-level=critical --force && npm audit --audit-level=critical


  scan-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: 
            - backend-build
      - run: 
          name: Scan dependencies for vulnerabilities
          command: | 
            cd backend && npm install && npm audit fix --force && npm audit --production --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            # exit 1
      - run: yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation list-exports \
            --query "Exports[?Name==\`ec2-ip-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" \
            --no-paginate --output text >> ./.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b5:da:b8:c8:ab:7b:6b:39:00:6b:eb:6d:be:57:94:24"]
      - attach_workspace:
          at: ~/
      # - run:
      #     name: verify inventory.txt file is present and contains ip address
      #     command: |
      #       cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible tar gzip
      - run:
          name: Install aws-cli
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
      - run: 
          name: Verify awscli was installed
          command: aws --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible && \
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache: 
          keys: 
            - backend-build
      - run:
          name: Run migrations
          command: |
            cd  backend \
            && npm install \
            && npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # search string needed to be modified
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
            echo "Add Migration to memstash!"
              curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment
      - revert-migrations     

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible tar gzip nodejs npm
      - run:
          name: Install aws-cli
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`ec2-ip-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" \
            --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL=${API_URL} >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend 
            npm install 
            npm run build 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist 
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b5:da:b8:c8:ab:7b:6b:39:00:6b:eb:6d:be:57:94:24"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible tar gzip nodejs npm
      - run:
          name: Deploy backend
          command: |
            cd backend 
            npm install
            npm build 
            cd .. 
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mv artifact.tar.gz ./.circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations   

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible tar gzip nodejs npm curl
      - run:
          name: Install aws-cli
          command: |
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Get Backend URL & Backend Smoke Test
          command: |
            export BACKEND_IP=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`ec2-ip-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" \
            --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}/api/status"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-2.amazonaws.com/#/employees"         
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      # - destroy-environment
      # - revert-migrations 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - echo-workflowId
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]